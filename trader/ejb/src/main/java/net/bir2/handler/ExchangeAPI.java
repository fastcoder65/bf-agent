package net.bir2.handler;

import java.util.List;

import generated.exchange.BFExchangeServiceStub;
import generated.exchange.BFExchangeServiceStub.APIRequestHeader;
import generated.exchange.BFExchangeServiceStub.APIResponseHeader;
import generated.exchange.BFExchangeServiceStub.ArrayOfCancelBets;
import generated.exchange.BFExchangeServiceStub.ArrayOfPlaceBets;
import generated.exchange.BFExchangeServiceStub.ArrayOfUpdateBets;
import generated.exchange.BFExchangeServiceStub.BetStatusEnum;
import generated.exchange.BFExchangeServiceStub.BetsOrderByEnum;
import generated.exchange.BFExchangeServiceStub.CancelBets;

//import generated.exchange.BFExchangeServiceStub.CancelBetsE;
import generated.exchange.BFExchangeServiceStub.CancelBets2;

import generated.exchange.BFExchangeServiceStub.CancelBetsErrorEnum;
import generated.exchange.BFExchangeServiceStub.CancelBetsReq;
import generated.exchange.BFExchangeServiceStub.CancelBetsResp;
import generated.exchange.BFExchangeServiceStub.CancelBetsResult;
import generated.exchange.BFExchangeServiceStub.GetAccountFunds;
import generated.exchange.BFExchangeServiceStub.GetAccountFundsErrorEnum;
import generated.exchange.BFExchangeServiceStub.GetAccountFundsReq;
import generated.exchange.BFExchangeServiceStub.GetAccountFundsResp;
import generated.exchange.BFExchangeServiceStub.GetMUBets;
import generated.exchange.BFExchangeServiceStub.GetMUBetsErrorEnum;
import generated.exchange.BFExchangeServiceStub.GetMUBetsReq;
import generated.exchange.BFExchangeServiceStub.GetMUBetsResp;
import generated.exchange.BFExchangeServiceStub.GetMarket;
import generated.exchange.BFExchangeServiceStub.GetMarketErrorEnum;
import generated.exchange.BFExchangeServiceStub.GetMarketInfo;
import generated.exchange.BFExchangeServiceStub.GetMarketInfoReq;
import generated.exchange.BFExchangeServiceStub.GetMarketInfoResp;
import generated.exchange.BFExchangeServiceStub.GetMarketPricesCompressed;
import generated.exchange.BFExchangeServiceStub.GetMarketPricesCompressedReq;
import generated.exchange.BFExchangeServiceStub.GetMarketPricesCompressedResp;
import generated.exchange.BFExchangeServiceStub.GetMarketPricesErrorEnum;
import generated.exchange.BFExchangeServiceStub.GetMarketProfitAndLoss;
import generated.exchange.BFExchangeServiceStub.GetMarketProfitAndLossErrorEnum;
import generated.exchange.BFExchangeServiceStub.GetMarketProfitAndLossReq;
import generated.exchange.BFExchangeServiceStub.GetMarketProfitAndLossResp;
import generated.exchange.BFExchangeServiceStub.GetMarketReq;
import generated.exchange.BFExchangeServiceStub.GetMarketResp;
import generated.exchange.BFExchangeServiceStub.MUBet;
import generated.exchange.BFExchangeServiceStub.Market;
import generated.exchange.BFExchangeServiceStub.MarketLite;
import generated.exchange.BFExchangeServiceStub.PlaceBets;

//import generated.exchange.BFExchangeServiceStub.PlaceBets1;
import generated.exchange.BFExchangeServiceStub.PlaceBets0;

import generated.exchange.BFExchangeServiceStub.PlaceBetsErrorEnum;
import generated.exchange.BFExchangeServiceStub.PlaceBetsReq;
import generated.exchange.BFExchangeServiceStub.PlaceBetsResp;
import generated.exchange.BFExchangeServiceStub.PlaceBetsResult;
import generated.exchange.BFExchangeServiceStub.ProfitAndLoss;
import generated.exchange.BFExchangeServiceStub.SortOrderEnum;
import generated.exchange.BFExchangeServiceStub.UpdateBets;

import generated.exchange.BFExchangeServiceStub.UpdateBets1; //import generated.exchange.BFExchangeServiceStub.UpdateBetsE;

import generated.exchange.BFExchangeServiceStub.UpdateBetsErrorEnum;
import generated.exchange.BFExchangeServiceStub.UpdateBetsReq;
import generated.exchange.BFExchangeServiceStub.UpdateBetsResp;
import generated.exchange.BFExchangeServiceStub.UpdateBetsResult;
import net.bir2.multitrade.util.APIContext;
import net.bir2.multitrade.util.InflatedMarketPrices;

public class ExchangeAPI {
    private static final MUBet[] MU_BET0 = new MUBet[0];
    private static final ProfitAndLoss[] PROFIT_AND_LOSS0 = new ProfitAndLoss[0];

    // There are 2 Betfair exchanges, so a stub connection is needed for each
	public static enum Exchange {
		UK, AUS
	}

    private static BFExchangeServiceStub stub_UK;
	private static BFExchangeServiceStub stub_AUS;

	// This stub is used to make all requests to the Betfair Exchange API
	// The exchange API is used to place bets and query markets.
	private static BFExchangeServiceStub getStub(Exchange exch)
			throws Exception {
		switch (exch) {
		case UK:
			// Lazy load the Exchange service stub generated by AXIS.
			if (stub_UK == null) {
				stub_UK = new BFExchangeServiceStub(
						"https://api.betfair.com/exchange/v5/BFExchangeService");

				// You may set up the connection parameters of the stub here if
				// necessary
				// For example: Wait 20 seconds for a response from the API
				stub_UK._getServiceClient().getOptions()
						.setTimeOutInMilliSeconds(20 * 1000);
				stub_UK
						._getServiceClient()
						.getOptions()
						.setProperty(
								org.apache.axis2.transport.http.HTTPConstants.MC_ACCEPT_GZIP,
								"true");
				stub_UK
						._getServiceClient()
						.getOptions()
						.setProperty(
								org.apache.axis2.transport.http.HTTPConstants.MC_GZIP_RESPONSE,
								"true");
				// stub_UK._getServiceClient().getOptions().setCallTransportCleanup(true);
				// stub_UK._getServiceClient().cleanup();
			}
			return stub_UK;

		case AUS:
			// Lazy load the Exchange service stub generated by AXIS.
			if (stub_AUS == null) {
				stub_AUS = new BFExchangeServiceStub(
						"https://api-au.betfair.com/exchange/v5/BFExchangeService");

				// You may set up the connection parameters of the stub here if
				// necessary
				// For example: Wait 20 seconds for a response from the API
				stub_AUS._getServiceClient().getOptions()
						.setTimeOutInMilliSeconds(20 * 1000);
				stub_AUS
						._getServiceClient()
						.getOptions()
						.setProperty(
								org.apache.axis2.transport.http.HTTPConstants.MC_ACCEPT_GZIP,
								"true");
				stub_AUS
						._getServiceClient()
						.getOptions()
						.setProperty(
								org.apache.axis2.transport.http.HTTPConstants.MC_GZIP_RESPONSE,
								"true");
				// stub_UK._getServiceClient().getOptions().setCallTransportCleanup(true);
				// stub_UK._getServiceClient().cleanup();

			}
			return stub_AUS;
		}

		// Should never happen
		throw new RuntimeException("Unable to get stub for exchange " + exch);
	}

	// Save the data from the request header into the context
	private static void setHeaderDataToContext(APIContext context,
			APIResponseHeader header) {
		context.setToken(header.getSessionToken()); // May be updated in each
													// call.
		context.setLastCall(header.getTimestamp().getTime());
	}

	// Get the request header to add to the request
	private static APIRequestHeader getHeader(String token) {
		APIRequestHeader header = new APIRequestHeader();
		// The header must have the session context.getToken() attached.
		header.setSessionToken(token);
		return header;
	}

	// Get the account funds for the exchange
	public static GetAccountFundsResp getAccountFunds(Exchange exch,
			APIContext context) throws Exception {
		// Create a request object
		GetAccountFundsReq request = new GetAccountFundsReq();
		request.setHeader(getHeader(context.getToken()));

		// Create the GetAccountFunds message and attach the request to it.
		GetAccountFunds msg = new GetAccountFunds();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		GetAccountFundsResp resp = getStub(exch).getAccountFunds(msg)
				.getResult();
		context.getUsage().addCall("getAccountFunds");

		// Check the response code, and throw and exception if login failed
		if (resp.getErrorCode() != GetAccountFundsErrorEnum.OK) {
			throw new IllegalArgumentException(
					"Failed to retrieve account funds: " + resp.getErrorCode()
							+ " Minor Error:" + resp.getMinorErrorCode()
							+ " Header Error:"
							+ resp.getHeader().getErrorCode());
		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp;
	}

	// Get the account funds for the exchange
	public static Market getMarket(Exchange exch, APIContext context,
			int marketId) throws Exception {
		// Create a request object
		GetMarketReq request = new GetMarketReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		request.setMarketId(marketId);

		// Create the GetMarket message and attach the request to it.
		GetMarket msg = new GetMarket();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		GetMarketResp resp = getStub(exch).getMarket(msg).getResult();
		context.getUsage().addCall("getMarket");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != GetMarketErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}
		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getMarket();
	}

	public static MarketLite getMarketInfo(Exchange exch, APIContext context,
			int marketId) throws Exception {
		// Create a request object
		GetMarketInfoReq request = new GetMarketInfoReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		request.setMarketId(marketId);

		// Create the GetMarket message and attach the request to it.
		GetMarketInfo msg = new GetMarketInfo();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		GetMarketInfoResp resp = getStub(exch).getMarketInfo(msg).getResult();
		context.getUsage().addCall("getMarketInfo");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != GetMarketErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}
		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getMarketLite();
	}

	// Get the compressed version of the market prices data and re-inflate it.
	public static InflatedMarketPrices getMarketPrices(Exchange exch,
			APIContext context, int marketId) throws Exception {
		// Create a request object
		GetMarketPricesCompressedReq request = new GetMarketPricesCompressedReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		request.setMarketId(marketId);

		// Create the message and attach the request to it.
		GetMarketPricesCompressed msg = new GetMarketPricesCompressed();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		GetMarketPricesCompressedResp resp = getStub(exch)
				.getMarketPricesCompressed(msg).getResult();
		context.getUsage().addCall("getMarketPricesCompressed");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != GetMarketPricesErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}
		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return new InflatedMarketPrices(resp.getMarketPrices());
	}
	
	// Get all matched and unmatched bets on the market
	public static MUBet[] getMUBets(Exchange exch, APIContext context,
			int marketId) throws Exception {

		// Create a request object
		GetMUBetsReq request = new GetMUBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		if (marketId > 0) {
			request.setMarketId(marketId);
		}
		request.setBetStatus(BetStatusEnum.MU);
		request.setSortOrder(SortOrderEnum.ASC);
		request.setOrderBy(BetsOrderByEnum.BET_ID);
		request.setRecordCount(100);
		request.setStartRecord(0);

		// Create the message and attach the request to it.
		GetMUBets msg = new GetMUBets();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		GetMUBetsResp resp = getStub(exch).getMUBets(msg).getResult();

		context.getUsage().addCall("getMUBets");

		// Check the response code, and throw and exception if call failed
		if ((resp.getErrorCode() != GetMUBetsErrorEnum.OK)
				&& (resp.getErrorCode() != GetMUBetsErrorEnum.NO_RESULTS)) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}
		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		if (resp.getErrorCode() == GetMUBetsErrorEnum.NO_RESULTS) {
			return MU_BET0;
		} else {
			return resp.getBets().getMUBet();
		}
	}

	public static Object[] getMarketProfitAndLoss(Exchange exch,
			APIContext context, int marketId) throws Exception {

		GetMarketProfitAndLossReq request = new GetMarketProfitAndLossReq();
		request.setHeader(getHeader(context.getToken()));

		request.setMarketID(marketId);
		request.setIncludeBspBets(false);
		// request.setIncludeSettledBets(false);

		GetMarketProfitAndLoss msg = new GetMarketProfitAndLoss();
		msg.setRequest(request);

		GetMarketProfitAndLossResp resp = getStub(exch).getMarketProfitAndLoss(
				msg).getResult();
		
		context.getUsage().addCall("getMarketProfitAndLoss");

		// Check the response code, and throw and exception if call failed
		if ((resp.getErrorCode() != GetMarketProfitAndLossErrorEnum.OK)
				&& (resp.getErrorCode() != GetMarketProfitAndLossErrorEnum.MARKET_CLOSED)
		// && (resp.getErrorCode() !=
		// GetMarketProfitAndLossErrorEnum.UNSUPPORTED_MARKET_TYPE)
		)

		{
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());
		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		if (resp.getErrorCode() == GetMarketProfitAndLossErrorEnum.MARKET_CLOSED
				|| resp.getErrorCode() == GetMarketProfitAndLossErrorEnum.UNSUPPORTED_MARKET_TYPE) {
			return PROFIT_AND_LOSS0;
		} else {
			return resp.getAnnotations().getProfitAndLoss();
		}
	}

	// Place some bets on the market
	public static PlaceBetsResult[] placeBets(Exchange exch,
			APIContext context, List<PlaceBets> bets) throws Exception { // PlaceBets[] bets

		// Create a request object
		PlaceBetsReq request = new PlaceBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfPlaceBets betsArray = new ArrayOfPlaceBets();
		
		PlaceBets[] _placeBets = new PlaceBets[bets.size()]; 
		for (int i = 0; i < bets.size(); i++) {
			_placeBets[i] = bets.get(i); 	
		}
		betsArray.setPlaceBets(_placeBets);
		
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		PlaceBets0 msg = new PlaceBets0();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		PlaceBetsResp resp = getStub(exch).placeBets(msg).getResult();
		context.getUsage().addCall("placeBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != PlaceBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getPlaceBetsResult();
	}

	// Place some bets on the market
	public static PlaceBetsResult[] placeBets(Exchange exch,
			APIContext context,  PlaceBets[] bets) throws Exception { 

		// Create a request object
		PlaceBetsReq request = new PlaceBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfPlaceBets betsArray = new ArrayOfPlaceBets();
		betsArray.setPlaceBets(bets);
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		PlaceBets0 msg = new PlaceBets0();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		PlaceBetsResp resp = getStub(exch).placeBets(msg).getResult();
		context.getUsage().addCall("placeBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != PlaceBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getPlaceBetsResult();
	}

	// Update a bet on the market
	public static UpdateBetsResult[] updateBets(Exchange exch,
			APIContext context, List<UpdateBets> bets ) throws Exception { // UpdateBets[] bets

		// Create a request object
		UpdateBetsReq request = new UpdateBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfUpdateBets betsArray = new ArrayOfUpdateBets();
		
		UpdateBets[] _updateBets = new UpdateBets[bets.size()]; 
		for (int i = 0; i < bets.size(); i++) {
			_updateBets[i] = bets.get(i); 	
		}
		betsArray.setUpdateBets(_updateBets);
		
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		UpdateBets1 msg = new UpdateBets1();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		UpdateBetsResp resp = getStub(exch).updateBets(msg).getResult();
		context.getUsage().addCall("updateBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != UpdateBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getUpdateBetsResult();
	}

	public static UpdateBetsResult[] updateBets(Exchange exch,
			APIContext context,  UpdateBets[] bets ) throws Exception {

		// Create a request object
		UpdateBetsReq request = new UpdateBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfUpdateBets betsArray = new ArrayOfUpdateBets();
		betsArray.setUpdateBets(bets);
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		UpdateBets1 msg = new UpdateBets1();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		UpdateBetsResp resp = getStub(exch).updateBets(msg).getResult();
		context.getUsage().addCall("updateBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != UpdateBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());

		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getUpdateBetsResult();
	}
	
	// Cancel a bet on the market
	public static CancelBetsResult[] cancelBets(Exchange exch,
			APIContext context, List<CancelBets> bets) throws Exception { // CancelBets[] bets
		// Create a request object
		CancelBetsReq request = new CancelBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfCancelBets betsArray = new ArrayOfCancelBets();

		CancelBets[] _cancelBets = new CancelBets[bets.size()]; 
		for (int i = 0; i < bets.size(); i++) {
			_cancelBets[i] = bets.get(i); 	
		}
		
		betsArray.setCancelBets(_cancelBets);
		
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		CancelBets2 msg = new CancelBets2();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		CancelBetsResp resp = getStub(exch).cancelBets(msg).getResult();
		context.getUsage().addCall("cancelBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != CancelBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());
		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getCancelBetsResult();
	}
	
	public static CancelBetsResult[] cancelBets(Exchange exch,
			APIContext context, CancelBets[] bets) throws Exception { 
		// Create a request object
		CancelBetsReq request = new CancelBetsReq();
		request.setHeader(getHeader(context.getToken()));

		// Set the parameters
		ArrayOfCancelBets betsArray = new ArrayOfCancelBets();
		betsArray.setCancelBets(bets);
		request.setBets(betsArray);

		// Create the message and attach the request to it.
		CancelBets2 msg = new CancelBets2();
		msg.setRequest(request);

		// Send the request to the Betfair Exchange Service.
		CancelBetsResp resp = getStub(exch).cancelBets(msg).getResult();
		context.getUsage().addCall("cancelBets");

		// Check the response code, and throw and exception if call failed
		if (resp.getErrorCode() != CancelBetsErrorEnum.OK) {
			throw new IllegalArgumentException("Failed to retrieve data: "
					+ resp.getErrorCode() + " Minor Error:"
					+ resp.getMinorErrorCode() + " Header Error:"
					+ resp.getHeader().getErrorCode());
		}

		// Transfer the response data back to the API context
		setHeaderDataToContext(context, resp.getHeader());

		return resp.getBetResults().getCancelBetsResult();
	}
	
}
