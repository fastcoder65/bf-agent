package net.bir2.handler;

import generated.global.BFGlobalServiceStub;
import generated.global.BFGlobalServiceStub.APIRequestHeader;
import generated.global.BFGlobalServiceStub.APIResponseHeader;
import generated.global.BFGlobalServiceStub.Login;
import generated.global.BFGlobalServiceStub.LoginErrorEnum;
import generated.global.BFGlobalServiceStub.LoginReq;
import generated.global.BFGlobalServiceStub.LoginResp;
import generated.global.BFGlobalServiceStub.Logout;
import generated.global.BFGlobalServiceStub.LogoutErrorEnum;
import generated.global.BFGlobalServiceStub.LogoutReq;
import generated.global.BFGlobalServiceStub.LogoutResp;

import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

import my.pack.util.AccountConstants;
import net.bir2.multitrade.util.APIContext;
import net.bir2.util.DTAction;

import com.betfair.aping.api.ApiNgJsonRpcOperations;
import com.betfair.aping.api.ApiNgOperations;
import com.betfair.aping.entities.Event;
import com.betfair.aping.entities.EventTypeResult;
import com.betfair.aping.entities.MarketFilter;
import com.betfair.aping.entities.TimeRange;
import com.betfair.aping.enums.MarketSort;
import com.betfair.aping.exceptions.APINGException;
import com.betfair.aping.util.HttpClientSSO;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;


public class GlobalAPI {
    
    private static BFGlobalServiceStub stub;
    
    private static final Logger log = Logger.getLogger(GlobalAPI.class.getName());
    
    
	// Lasy load the Global service stub generated by Apache Axis.
	// This stub is used to make all requests to the Betfair Global API
    // The global API is generally used for account management features
	private static BFGlobalServiceStub getStub() throws Exception {
		if (stub == null)
		{
			stub = new BFGlobalServiceStub("https://api.betfair.com/global/v3/BFGlobalService");

			// You may set up the connection parameters of the stub here if necessary
	        // For example: Wait 20 seconds for a response from the API
			stub._getServiceClient().getOptions().setTimeOutInMilliSeconds(20 * 1000);
			stub._getServiceClient().getOptions().setProperty(org.apache.axis2.transport.http.HTTPConstants.MC_ACCEPT_GZIP, "true");
			stub._getServiceClient().getOptions().setProperty(org.apache.axis2.transport.http.HTTPConstants.MC_GZIP_RESPONSE, "true");
		}
		return stub;
	}
	
	// Get the request header to add to the request
	private static APIRequestHeader getHeader(APIContext context) {
        APIRequestHeader header = new APIRequestHeader();
        // The header must have the session token attached.
        header.setSessionToken(context.getToken());
        return header;
	}
	
	// Save the data from the request header into the context
	private static void setHeaderDataToContext(APIContext context, APIResponseHeader header) {
		context.setToken(header.getSessionToken()); // May be updated in each call.
		context.setLastCall(header.getTimestamp().getTime());
	}

	private static final String SESSION_TOKEN = "sessionToken";
	private static final String LOGIN_STATUS = "loginStatus";
	
	private static final ObjectMapper om = new ObjectMapper();

	public static void login(APIContext context, String userName, String password) throws Exception {
		String sessionToken = getSessionToken(AccountConstants.APP_KEY, userName, password);

		context.setProduct(AccountConstants.APP_KEY);
		context.setToken(sessionToken);
	//	System.out.println ("login - appKey: " + context.getProduct());
	//	System.out.println ("login - ssoId: " + context.getToken());

	}
	
	private static String getSessionToken(String appKey, String userName, String password) throws Exception {
		JsonNode jsonNode = null;
		String sessionToken = null;
			String sessionResponse = null;
			
			if ((sessionResponse = HttpClientSSO.getSessionTokenResponse( appKey, userName, password )) != null) {
				jsonNode = om.readTree(sessionResponse);

		        if (!"SUCCESS".equals ( jsonNode.get(LOGIN_STATUS).textValue() ) ) {
		        	throw new IllegalArgumentException("Failed to log in: " + jsonNode.get(LOGIN_STATUS));
		        }

				if (jsonNode.get(SESSION_TOKEN) != null)
				sessionToken = jsonNode.get(SESSION_TOKEN).textValue();
				
				log.info("Session token:" + sessionToken);
			} else {
				log.severe("Getting null session token from BetFair");
			}

			return sessionToken;
	}

	// Fire a Web services login request
	public static void login_old(APIContext context, String username, String password) throws Exception {
		// Create a login request object
        LoginReq request = new LoginReq();
        
        // Set the parameters you wish to pass the the API
        request.setUsername(username);
        request.setPassword(password);
        request.setProductId(82); // 82 is the standard Free Access API
        request.setIpAddress(""); // Does not need to be set, but may not be null so use an empty string.

        // Create the Login message and attach the request to it.
        Login msg = new Login();
        msg.setRequest(request);
        
        // Send the request to the Betfair Service.
        LoginResp resp = getStub().login(msg).getResult();
        context.getUsage().addCall("login");
        
        // Check the response code, and throw and exception if the call failed
        if (resp.getErrorCode() != LoginErrorEnum.OK)
        {
        	throw new IllegalArgumentException("Failed to log in: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
        }
        
        // Transfer the response data back to the API context
        setHeaderDataToContext(context, resp.getHeader());
	}
 
	private static ApiNgOperations jsonOperations = ApiNgJsonRpcOperations.getInstance();	
	
	// Get the active event types within the system (on both exchanges)
	public static List<EventTypeResult> getActiveEventTypes(APIContext context) throws APINGException {
        MarketFilter marketFilter = new MarketFilter();
        List<EventTypeResult> r = jsonOperations.listEventTypes(marketFilter, context.getProduct(), context.getToken());
        return r;
	}
	
	// Get the markets available for the event specified
	public static List<Event> getEvents(APIContext context, Set<String> eventTypeIds, Set<String> eventIds )  throws APINGException {
        MarketFilter marketFilter = new MarketFilter();
        Set<String> _eventTypeIds = new HashSet<String>();
        
        if ( eventTypeIds != null && eventTypeIds.size() > 0 )
        	_eventTypeIds.addAll(eventTypeIds); 
        	
        	marketFilter.setEventTypeIds(_eventTypeIds);

        	Set<String> _eventIds = new HashSet<String>();
        	
        if ( eventIds != null && eventIds.size() > 0 )
        	_eventIds.addAll(eventIds);
        
        	marketFilter.setEventIds(_eventIds);
        	TimeRange timeRange = new TimeRange();
        	
        	timeRange.setFrom( DTAction.getTimeFormBegin(new Date()));
        	timeRange.setTo( DTAction.getTimeToEnd(new Date()));
        	
            marketFilter.setMarketStartTime(timeRange);
            marketFilter.setTurnInPlayEnabled(true);
            
        List<Event> r = jsonOperations.listEvents(marketFilter, MarketSort.FIRST_TO_START, "200", context.getProduct(), context.getToken());
        return r;
	}
	
	// Fire a Web services logout request
	public static void logout(APIContext context) throws Exception {
		// Create a request object
        LogoutReq request = new LogoutReq();
        request.setHeader(getHeader(context));

        // Create the Logout message and attach the request to it.
        Logout msg = new Logout();
        msg.setRequest(request);
        
        // Send the request to the Betfair Service.
        LogoutResp resp = getStub().logout(msg).getResult();
        context.getUsage().addCall("logout");
       
        // Check the response code, and throw and exception if the call failed
        if (resp.getErrorCode() != LogoutErrorEnum.OK)
        {
        	throw new IllegalArgumentException("Failed to log out: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
        }
        
        setHeaderDataToContext(context, resp.getHeader());
	}
	
}
